<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>4月10日有感</title>
    <link href="/2021/04/10/4%E6%9C%8810%E6%97%A5%E6%9C%89%E6%84%9F/"/>
    <url>/2021/04/10/4%E6%9C%8810%E6%97%A5%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>第一次萌生制作博客的念头还是在三个月前，那是看到川大校友王兆基的博客感觉非常神奇，摩拳擦掌想要自己做一个。先是在网上查各种资料，得知以hexo作为模板制作的博客可以托管在GitHub上，几乎零成本，我便决定试一试。</p><p>一开始是非常困难的，要下载很多软件。要么是纯英文的介绍让我一脸懵，要么资源在国外我为了逃避龟速下载只得在国内找资源。一通折腾过后，总算是万事俱备，我便开始构建我的博客。这时我才发现之前遇到的都不算困难。</p><p>即使网上的流程非常详细，但对于我这个小白而言还是难以理解，在加之有一些教程自身存在一些局限性，我不得不四处寻找其他版本的教程。前前后后找了四五个教程，曾遇到过一个非常详细的教程，让我少走了不少弯路（不过现在被封了）。</p><p>如果问我学到了什么，我真的不知道该怎么回答。虽然我在这个过程中使用了git、hexo、GitHub等工具，但我还是十分清楚我对他们仍是一无所知。但是我要频繁地使用命令窗口，看着满屏的指令结果，并在其中找到问题，我敢说在这个过程中我对计算机的运行原理有了更为深入，抽象的理解。深入是指几乎没有老师可以教我，如果没有这次经历我可能一辈子也想不到；抽象是指要是让我给别人讲一讲到底是怎么回事，我真的讲不出来什么。</p><p>此外博客要搭建在网络上，不知不觉中我对网络的原理也有了一些自己的感觉。当然很多时候都是被逼出来的，明明本地可以预览，就是挂不到网上；明明已经部署但是网上的资源就是不更新；以及最令我无语的是因为政治敏感的原因，曾有一段时间无法访问GitHub导致博客塌掉，无奈之下我只得弃城逃跑······</p><p>当然在设置主题的时候我终于懂得了程序员的辛苦，在这里我留一个备份,感谢中文注释！！！</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># Hexo Theme Fluid</span><br><span class="hljs-comment"># Author: Fluid-dev</span><br><span class="hljs-comment"># Github: https://github.com/fluid-dev/hexo-theme-fluid</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 配置指南: https://hexo.fluid-dev.com/docs/guide/</span><br><span class="hljs-comment"># 你可以从指南中获得更详细的说明</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Guide: https://hexo.fluid-dev.com/docs/en/guide/</span><br><span class="hljs-comment"># You can get more detailed help from the guide</span><br><span class="hljs-comment">#---------------------------</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 全局</span><br><span class="hljs-comment"># Global</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># 用于浏览器标签的图标</span><br><span class="hljs-comment"># Icon for browser tab</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/avatar.png</span><br><br><span class="hljs-comment"># 用于苹果设备的图标</span><br><span class="hljs-comment"># Icon for Apple touch</span><br><span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/img/avatar.png</span><br><br><span class="hljs-comment"># 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名</span><br><span class="hljs-comment"># Title separator in browser tab, eg: article - site</span><br><span class="hljs-attr">tab_title_separator:</span> <span class="hljs-string">&quot; - &quot;</span><br><br><span class="hljs-comment"># 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）</span><br><span class="hljs-comment"># Force all links to be HTTPS (applicable to HTTP mixed error)</span><br><span class="hljs-attr">force_https:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 代码块的增强配置</span><br><span class="hljs-comment"># Enhancements to code blocks</span><br><span class="hljs-attr">code:</span><br>  <span class="hljs-comment"># 是否开启复制代码的按钮</span><br>  <span class="hljs-comment"># Enable copy code button</span><br>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 代码高亮</span><br>  <span class="hljs-comment"># Code highlight</span><br>  <span class="hljs-attr">highlight:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 代码块是否显示行号</span><br>    <span class="hljs-comment"># If true, the code block display line numbers</span><br>    <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 实现高亮的库，对应下面的设置</span><br>    <span class="hljs-comment"># Highlight library</span><br>    <span class="hljs-comment"># Options: highlightjs | prismjs</span><br>    <span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span><br><br>    <span class="hljs-attr">highlightjs:</span><br>      <span class="hljs-comment"># 在链接中挑选 style 填入</span><br>      <span class="hljs-comment"># Select a style in the link</span><br>      <span class="hljs-comment"># See: https://highlightjs.org/static/demo/</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;Github Gist&quot;</span><br><br>      <span class="hljs-comment"># 是否根据 style 改变代码背景色（如果 style 是深色背景别忘了开启此项）</span><br>      <span class="hljs-comment"># If true, the code background will change color based on the style (If style has a dark background, don&#x27;t forget to true)</span><br>      <span class="hljs-attr">bg_color:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-attr">prismjs:</span><br>      <span class="hljs-comment"># 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接</span><br>      <span class="hljs-comment"># Select the style button on the right side of the link page, you can also set the CSS link</span><br>      <span class="hljs-comment"># See: https://prismjs.com/</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span><br><br>      <span class="hljs-comment"># 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成</span><br>      <span class="hljs-comment"># If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser</span><br>      <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 一些好玩的功能</span><br><span class="hljs-comment"># Some fun features</span><br><span class="hljs-attr">fun_features:</span><br>  <span class="hljs-comment"># 为 subtitle 添加打字机效果</span><br>  <span class="hljs-comment"># Typing animation for subtitle</span><br>  <span class="hljs-attr">typing:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 打印速度，数字越大越慢</span><br>    <span class="hljs-comment"># Typing speed, the larger the number, the slower</span><br>    <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">70</span><br><br>    <span class="hljs-comment"># 游标字符</span><br>    <span class="hljs-comment"># Cursor character</span><br>    <span class="hljs-attr">cursorChar:</span> <span class="hljs-string">&quot;_&quot;</span><br><br>    <span class="hljs-comment"># 是否循环播放效果</span><br>    <span class="hljs-comment"># If true, loop animation</span><br>    <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 为文章内容中的标题添加锚图标</span><br>  <span class="hljs-comment"># Add an anchor icon to the title on the post page</span><br>  <span class="hljs-attr">anchorjs:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">element:</span> <span class="hljs-string">h1,h2,h3,h4,h5,h6</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">right</span><br>    <span class="hljs-comment"># Options: hover | always | touch</span><br>    <span class="hljs-attr">visible:</span> <span class="hljs-string">hover</span><br>    <span class="hljs-comment"># Option：§ | # | ❡</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;&quot;</span><br><br>  <span class="hljs-comment"># 加载进度条</span><br>  <span class="hljs-comment"># Progress bar when loading</span><br>  <span class="hljs-attr">progressbar:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">height_px:</span> <span class="hljs-number">3</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#29d&quot;</span><br>    <span class="hljs-comment"># See: https://github.com/rstacruz/nprogress</span><br>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">showSpinner:</span> <span class="hljs-literal">false</span>, <span class="hljs-attr">trickleSpeed:</span> <span class="hljs-number">100</span> &#125;<br><br><span class="hljs-comment"># 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换</span><br><span class="hljs-comment"># Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor&#x27;s browser will store his switch option</span><br><span class="hljs-attr">dark_mode:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式</span><br>  <span class="hljs-comment"># Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time</span><br>  <span class="hljs-comment"># Options: auto | light | dark</span><br>  <span class="hljs-attr">default:</span> <span class="hljs-string">auto</span><br><br><span class="hljs-comment"># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发</span><br><span class="hljs-comment"># Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below</span><br><span class="hljs-comment"># See: https://www.webdesignrankings.com/resources/lolcolors/</span><br><span class="hljs-attr">color:</span><br>  <span class="hljs-comment"># body 背景色</span><br>  <span class="hljs-comment"># Color of body background</span><br>  <span class="hljs-attr">body_bg_color:</span> <span class="hljs-string">&quot;#eee&quot;</span><br>  <span class="hljs-comment"># 暗色模式下的 body 背景色，下同</span><br>  <span class="hljs-comment"># Color in dark mode, the same below</span><br>  <span class="hljs-attr">body_bg_color_dark:</span> <span class="hljs-string">&quot;#181c27&quot;</span><br><br>  <span class="hljs-comment"># 顶部菜单背景色</span><br>  <span class="hljs-comment"># Color of navigation bar background</span><br>  <span class="hljs-attr">navbar_bg_color:</span> <span class="hljs-string">&quot;#2f4154&quot;</span><br>  <span class="hljs-attr">navbar_bg_color_dark:</span> <span class="hljs-string">&quot;#1f3144&quot;</span><br><br>  <span class="hljs-comment"># 顶部菜单字体色</span><br>  <span class="hljs-comment"># Color of navigation bar text</span><br>  <span class="hljs-attr">navbar_text_color:</span> <span class="hljs-string">&quot;#fff&quot;</span><br>  <span class="hljs-attr">navbar_text_color_dark:</span> <span class="hljs-string">&quot;#d0d0d0&quot;</span><br><br>  <span class="hljs-comment"># 全局字体色</span><br>  <span class="hljs-comment"># Color of global text</span><br>  <span class="hljs-attr">text_color:</span> <span class="hljs-string">&quot;#3c4858&quot;</span><br>  <span class="hljs-attr">text_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br><br>  <span class="hljs-comment"># 全局次级字体色（摘要、简介等位置）</span><br>  <span class="hljs-comment"># Color of global secondary text (excerpt, introduction, etc.)</span><br>  <span class="hljs-attr">sec_text_color:</span> <span class="hljs-string">&quot;#718096&quot;</span><br>  <span class="hljs-attr">sec_text_color_dark:</span> <span class="hljs-string">&quot;#a7a9ad&quot;</span><br><br>  <span class="hljs-comment"># 文章正文字体色</span><br>  <span class="hljs-comment"># Color of post text</span><br>  <span class="hljs-attr">post_text_color:</span> <span class="hljs-string">&quot;#2c3e50&quot;</span><br>  <span class="hljs-attr">post_text_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br><br>  <span class="hljs-comment"># 文章正文字体色（h1 h2 h3...）</span><br>  <span class="hljs-comment"># Color of Article heading (h1 h2 h3...)</span><br>  <span class="hljs-attr">post_heading_color:</span> <span class="hljs-string">&quot;#1a202c&quot;</span><br>  <span class="hljs-attr">post_heading_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br><br>  <span class="hljs-comment"># 文章超链接字体色</span><br>  <span class="hljs-comment"># Color of post link</span><br>  <span class="hljs-attr">post_link_color:</span> <span class="hljs-string">&quot;#0366d6&quot;</span><br>  <span class="hljs-attr">post_link_color_dark:</span> <span class="hljs-string">&quot;#1589e9&quot;</span><br><br>  <span class="hljs-comment"># 超链接悬浮时字体色</span><br>  <span class="hljs-comment"># Color of link when hovering</span><br>  <span class="hljs-attr">link_hover_color:</span> <span class="hljs-string">&quot;#30a9de&quot;</span><br>  <span class="hljs-attr">link_hover_color_dark:</span> <span class="hljs-string">&quot;#30a9de&quot;</span><br><br>  <span class="hljs-comment"># 超链接悬浮背景色</span><br>  <span class="hljs-comment"># Color of link background when hovering</span><br>  <span class="hljs-attr">link_hover_bg_color:</span> <span class="hljs-string">&quot;#f8f9fa&quot;</span><br>  <span class="hljs-attr">link_hover_bg_color_dark:</span> <span class="hljs-string">&quot;#364151&quot;</span><br><br>  <span class="hljs-comment"># 主面板背景色</span><br>  <span class="hljs-comment"># Color of main board</span><br>  <span class="hljs-attr">board_color:</span> <span class="hljs-string">&quot;#fff&quot;</span><br>  <span class="hljs-attr">board_color_dark:</span> <span class="hljs-string">&quot;#252d38&quot;</span><br><br><span class="hljs-comment"># 主题字体配置</span><br><span class="hljs-comment"># Font</span><br><span class="hljs-attr">font:</span><br>  <span class="hljs-attr">font_size:</span> <span class="hljs-string">16px</span><br>  <span class="hljs-attr">font_family:</span><br>  <span class="hljs-attr">code_font_size:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span><br><br><span class="hljs-comment"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span><br><span class="hljs-comment"># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`</span><br><span class="hljs-attr">custom_js:</span><br><br><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><span class="hljs-attr">custom_css:</span><br><br><span class="hljs-comment"># 自定义 &lt;head&gt; 节点中的 HTML 内容</span><br><span class="hljs-comment"># Customize &lt;head&gt; HTML content</span><br><span class="hljs-attr">custom_head:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># 自定义底部 HTML 内容（位于 footer 上方），注意不要和 `post: custom` 配置冲突</span><br><span class="hljs-comment"># Customize the HTML content at the bottom (located above the footer), be careful not to conflict with `post: custom`</span><br><span class="hljs-attr">custom_html:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># 网页访问统计</span><br><span class="hljs-comment"># Analysis of website visitors</span><br><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串</span><br>  <span class="hljs-comment"># Baidu analytics, get the string behind `hm.js?`</span><br>  <span class="hljs-comment"># See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376</span><br>  <span class="hljs-attr">baidu:</span><br><br>  <span class="hljs-comment"># Google 统计的 Tracking ID</span><br>  <span class="hljs-comment"># Google analytics, set Tracking ID</span><br>  <span class="hljs-comment"># See: https://developers.google.com/analytics/devguides/collection/analyticsjs</span><br>  <span class="hljs-attr">google:</span><br><br>  <span class="hljs-comment"># Google gtag.js 的媒体资源 ID</span><br>  <span class="hljs-comment"># Google gtag.js GA_MEASUREMENT_ID</span><br>  <span class="hljs-comment"># See: https://developers.google.com/analytics/devguides/collection/gtagjs/</span><br>  <span class="hljs-attr">gtag:</span><br><br>  <span class="hljs-comment"># 腾讯统计的 H5 App ID，开启高级功能才有cid</span><br>  <span class="hljs-comment"># Tencent analytics, set APP ID</span><br>  <span class="hljs-comment"># See: https://mta.qq.com/h5/manage/ctr_app_manage</span><br>  <span class="hljs-attr">tencent:</span><br>    <span class="hljs-attr">sid:</span><br>    <span class="hljs-attr">cid:</span><br><br>  <span class="hljs-comment"># 51.la 站点统计 ID</span><br>  <span class="hljs-comment"># 51.la analytics</span><br>  <span class="hljs-comment"># See: https://www.51.la/user/site/index</span><br>  <span class="hljs-attr">woyaola:</span>  <span class="hljs-comment"># 51.la 站点统计 ID，参见</span><br><br>  <span class="hljs-comment"># 友盟/cnzz 站点统计 web_id</span><br>  <span class="hljs-comment"># cnzz analytics</span><br>  <span class="hljs-comment"># See: https://web.umeng.com/main.php?c=site&amp;a=show</span><br>  <span class="hljs-attr">cnzz:</span><br><br>  <span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span><br>  <span class="hljs-comment"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span><br>  <span class="hljs-attr">leancloud:</span><br>    <span class="hljs-attr">app_id:</span><br>    <span class="hljs-attr">app_key:</span><br>    <span class="hljs-comment"># REST API 服务器地址，国际版不填</span><br>    <span class="hljs-comment"># Only the Chinese mainland users need to set</span><br>    <span class="hljs-attr">server_url:</span><br><br><span class="hljs-comment"># 对页面中的图片和评论插件进行懒加载处理，可见范围外的元素不会提前加载</span><br><span class="hljs-comment"># Lazy loading of images and comment plugin on the page</span><br><span class="hljs-attr">lazyload:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 加载时的占位图片</span><br>  <span class="hljs-comment"># The placeholder image when loading</span><br>  <span class="hljs-attr">loading_img:</span> <span class="hljs-string">/img/loading.gif</span><br><br>  <span class="hljs-comment"># 开启后懒加载仅在文章页生效，如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`</span><br>  <span class="hljs-comment"># If true, only enable lazyload on the post page. For custom pages, you can set &#x27;lazyload: true&#x27; in front-matter</span><br>  <span class="hljs-attr">onlypost:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 触发加载的偏移倍数，基数是视窗高度，可根据部署环境的请求速度调节</span><br>  <span class="hljs-comment"># The factor of viewport height that triggers loading</span><br>  <span class="hljs-attr">offset_factor:</span> <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/</span><br><span class="hljs-comment"># Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/</span><br><span class="hljs-attr">iconfont:</span> <span class="hljs-string">//at.alicdn.com/t/font_1736178_kmeydafke9r.css</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 页头</span><br><span class="hljs-comment"># Header</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># 导航栏的相关配置</span><br><span class="hljs-comment"># Navigation bar</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span><br>  <span class="hljs-comment"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;这世界本就美好&quot;</span><br><br>  <span class="hljs-comment"># 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效</span><br>  <span class="hljs-comment"># Navigation bar frosted glass special animation. It is an experimental feature</span><br>  <span class="hljs-attr">ground_glass:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 模糊像素，只能为数字，数字越大模糊度越高</span><br>    <span class="hljs-comment"># Number of blurred pixel. the larger the number, the higher the blur</span><br>    <span class="hljs-attr">px:</span> <span class="hljs-number">3</span><br><br>    <span class="hljs-comment"># 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体</span><br>    <span class="hljs-comment"># Ratio of opacity, 1.0 is completely opaque</span><br>    <span class="hljs-comment"># available: 0 - 1.0</span><br>    <span class="hljs-attr">alpha:</span> <span class="hljs-number">0.7</span><br><br>  <span class="hljs-comment"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span><br>  <span class="hljs-comment"># Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name</span><br>  <span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>  <span class="hljs-comment">#  - &#123; key: &quot;category&quot;, link: &quot;/categories/&quot;, icon: &quot;iconfont icon-category-fill&quot; &#125;</span><br>  <span class="hljs-comment">#  - &#123; key: &quot;tag&quot;, link: &quot;/tags/&quot;, icon: &quot;iconfont icon-tags-fill&quot; &#125;</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br>    <span class="hljs-comment">#- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;</span><br><br><span class="hljs-comment"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span><br><span class="hljs-comment"># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span><br><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span><br>  <span class="hljs-comment"># Path for search index file, it can be a relative path or an absolute path</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">/local-search.xml</span><br><br>  <span class="hljs-comment"># 文件生成在本地的位置，必须是相对路径</span><br>  <span class="hljs-comment"># The location where the index file is generated locally, it must be a relative location</span><br>  <span class="hljs-attr">generate_path:</span> <span class="hljs-string">/local-search.xml</span><br><br>  <span class="hljs-comment"># 搜索的范围</span><br>  <span class="hljs-comment"># Search field</span><br>  <span class="hljs-comment"># Options: post | page | all</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br><br>  <span class="hljs-comment"># 搜索是否扫描正文</span><br>  <span class="hljs-comment"># If true, search will scan the post content</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 首屏图片的相关配置</span><br><span class="hljs-comment"># Config of the big image on the first screen</span><br><span class="hljs-attr">banner:</span><br>  <span class="hljs-comment"># 视差滚动，图片与板块会随着屏幕滚动产生视差效果</span><br>  <span class="hljs-comment"># Scrolling parallax</span><br>  <span class="hljs-attr">parallax:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0</span><br>  <span class="hljs-comment"># Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0</span><br>  <span class="hljs-attr">width_height_ratio:</span> <span class="hljs-number">1.0</span><br><br><span class="hljs-comment"># 向下滚动的箭头</span><br><span class="hljs-comment"># Scroll down arrow</span><br><span class="hljs-attr">scroll_down_arrow:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 头图高度不小于指定比例，才显示箭头</span><br>  <span class="hljs-comment"># Only the height of the banner image is greater than the ratio, the arrow is displayed</span><br>  <span class="hljs-comment"># Available: 0 - 100</span><br>  <span class="hljs-attr">banner_height_limit:</span> <span class="hljs-number">80</span><br><br>  <span class="hljs-comment"># 翻页后自动滚动</span><br>  <span class="hljs-comment"># Auto scroll after page turning</span><br>  <span class="hljs-attr">scroll_after_turning_page:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 向顶部滚动的箭头</span><br><span class="hljs-comment"># Scroll top arrow</span><br><span class="hljs-attr">scroll_top_arrow:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 页脚</span><br><span class="hljs-comment"># Footer</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span><br>  <span class="hljs-comment"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-string">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">  &#x27;</span><br><br>  <span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><br>  <span class="hljs-comment"># Display website PV and UV statistics</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 统计数据来源，如果使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；如果使用 busuanzi 可能会有请求失败的情况</span><br>    <span class="hljs-comment"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span><br>    <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span><br><br>    <span class="hljs-comment"># 页面显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    <span class="hljs-comment"># Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below</span><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br><br>  <span class="hljs-comment"># 国内大陆服务器的备案信息</span><br>  <span class="hljs-comment"># For Chinese mainland website policy, other areas keep disable</span><br>  <span class="hljs-attr">beian:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># ICP证号</span><br>    <span class="hljs-attr">icp_text:</span> <span class="hljs-string">京ICP证123456号</span><br>    <span class="hljs-comment"># 公安备案号，不填则只显示ICP</span><br>    <span class="hljs-attr">police_text:</span> <span class="hljs-string">京公网安备12345678号</span><br>    <span class="hljs-comment"># 公安备案的编号，用于URL跳转查询</span><br>    <span class="hljs-attr">police_code:</span> <span class="hljs-number">12345678</span><br>    <span class="hljs-comment"># 公安备案的图片. 为空时不显示备案图片</span><br>    <span class="hljs-attr">police_icon:</span> <span class="hljs-string">/img/police_beian.png</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 首页</span><br><span class="hljs-comment"># Home Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br>  <span class="hljs-comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br><br>  <span class="hljs-comment"># 头图高度，屏幕百分比</span><br>  <span class="hljs-comment"># Height ratio of banner image</span><br>  <span class="hljs-comment"># Available: 0 - 100</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span><br><br>  <span class="hljs-comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span><br>  <span class="hljs-comment"># Opacity of the banner mask, 1.0 is completely opaque</span><br>  <span class="hljs-comment"># Available: 0 - 1.0</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 首页副标题的独立设置</span><br>  <span class="hljs-comment"># Independent config of home page subtitle</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>    <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;海内存知己，天涯若比邻&quot;</span><br><br>    <span class="hljs-comment"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span><br>    <span class="hljs-comment"># Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation</span><br>    <span class="hljs-attr">api:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>      <span class="hljs-comment"># 请求地址</span><br>      <span class="hljs-comment"># Request url</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;&quot;</span><br><br>      <span class="hljs-comment"># 请求方法</span><br>      <span class="hljs-comment"># Request method</span><br>      <span class="hljs-comment"># Available: GET | POST | PUT</span><br>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br><br>      <span class="hljs-comment"># 请求头</span><br>      <span class="hljs-comment"># Request headers</span><br>      <span class="hljs-attr">headers:</span> &#123;&#125;<br><br>      <span class="hljs-comment"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项</span><br>      <span class="hljs-comment"># The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected</span><br>      <span class="hljs-attr">keys:</span> []<br><br>  <span class="hljs-comment"># 自动截取文章摘要</span><br>  <span class="hljs-comment"># Auto extract post</span><br>  <span class="hljs-attr">auto_excerpt:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 打开文章的标签方式</span><br>  <span class="hljs-comment"># The browser tag to open the post</span><br>  <span class="hljs-comment"># Available: _blank | _self</span><br>  <span class="hljs-attr">post_url_target:</span> <span class="hljs-string">_self</span><br><br>  <span class="hljs-comment"># 是否显示文章信息（时间、分类、标签）</span><br>  <span class="hljs-comment"># Meta information of post</span><br>  <span class="hljs-attr">post_meta:</span><br>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">category:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章通过 sticky 排序后，在首页文章标题前显示图标</span><br>  <span class="hljs-comment"># If the posts are sorted by `sticky`, an icon is displayed in front of the post title</span><br>  <span class="hljs-attr">post_sticky:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-top&quot;</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span><br>  <span class="hljs-comment"># Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed</span><br>  <span class="hljs-attr">default_index_img:</span><br><br>  <span class="hljs-comment"># 文章标题下方的元信息</span><br>  <span class="hljs-comment"># Meta information below title</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br>    <span class="hljs-comment"># Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config</span><br>    <span class="hljs-attr">author:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br>    <span class="hljs-comment"># Post date, based on `date` field in front-matter, if not set, based on create date of .md file</span><br>    <span class="hljs-attr">date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>      <span class="hljs-comment"># ISO-8601 date format</span><br>      <span class="hljs-comment"># See: http://momentjs.cn/docs/#/parsing/string-format/</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL a&quot;</span><br><br>    <span class="hljs-comment"># 字数统计</span><br>    <span class="hljs-comment"># Word count</span><br>    <span class="hljs-attr">wordcount:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>      <span class="hljs-comment"># Displayed text, &#123;&#125; is a placeholder for numbers (must be included), the same below</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span><br><br>    <span class="hljs-comment"># 估计阅读全文需要的时长</span><br>    <span class="hljs-comment"># Estimate the time required to read the full text</span><br>    <span class="hljs-attr">min2read:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span><br>      <span class="hljs-comment"># 每分钟阅读多少字，如果是技术文章，建议降低</span><br>      <span class="hljs-comment"># Words read per minute</span><br>      <span class="hljs-attr">words:</span> <span class="hljs-number">100</span><br><br>    <span class="hljs-comment"># 浏览量计数</span><br>    <span class="hljs-comment"># Number of visits</span><br>    <span class="hljs-attr">views:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 统计数据来源</span><br>      <span class="hljs-comment"># Data Source</span><br>      <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br><br>  <span class="hljs-comment"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）</span><br>  <span class="hljs-comment"># Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)</span><br>  <span class="hljs-attr">updated:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 描述文字</span><br>    <span class="hljs-comment"># Descriptive text before date</span><br>    <span class="hljs-attr">content:</span> <span class="hljs-string">本文最后更新于：</span><br><br>    <span class="hljs-comment"># 是否使用相对时间表示，比如：&quot;3 天前&quot;</span><br>    <span class="hljs-comment"># If true, it will be a relative time, such as: &quot;3 days ago&quot;</span><br>    <span class="hljs-attr">relative:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 文章右侧目录</span><br>  <span class="hljs-comment"># Table of contents (TOC)</span><br>  <span class="hljs-attr">toc:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 目录会选择这些节点作为标题</span><br>    <span class="hljs-comment"># TOC will select these nodes as headings</span><br>    <span class="hljs-attr">headingSelector:</span> <span class="hljs-string">&quot;h1,h2,h3,h4,h5,h6&quot;</span><br>    <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开</span><br>    <span class="hljs-comment"># Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings</span><br>    <span class="hljs-attr">collapseDepth:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 版权声明，会显示在每篇文章的结尾</span><br>  <span class="hljs-comment"># Copyright, will be displayed at the end of each post</span><br>  <span class="hljs-attr">copyright:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;本博客所有文章除特别声明外，均采用 &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/deed.zh&quot; rel=&quot;nofollow noopener&quot;&gt;CC BY-SA 4.0 协议&lt;/a&gt; ，转载请注明出处！&#x27;</span><br><br>  <span class="hljs-comment"># 文章底部上一篇下一篇功能</span><br>  <span class="hljs-comment"># Link to previous/next post</span><br>  <span class="hljs-attr">prev_next:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章底部自定义区域（位于 footer 上方），支持 HTML，可插入赞赏码、公众号这类内容内容</span><br>  <span class="hljs-comment"># Custom content at the bottom of the post page (located above the footer)</span><br>  <span class="hljs-attr">custom:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;&lt;img src=&quot;https://octodex.github.com/images/jetpacktocat.png&quot; class=&quot;rounded mx-auto d-block mt-5&quot; style=&quot;width:150px; height:150px;&quot;&gt;&#x27;</span><br><br>  <span class="hljs-comment"># 文章图片可点击放大</span><br>  <span class="hljs-comment"># Zoom feature of images</span><br>  <span class="hljs-attr">image_zoom:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突</span><br>  <span class="hljs-comment"># Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict</span><br>  <span class="hljs-attr">footnote:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 脚注的节标题，也可以在 front-matter 中通过 `foot<span class="hljs-doctag">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` 这种形式修改单独页面的 header</span><br>    <span class="hljs-comment"># The section title of the footnote, you can also modify the header of a single page in the form of `foot<span class="hljs-doctag">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` in front-matter</span><br>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br>  <span class="hljs-comment"># 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式</span><br>  <span class="hljs-comment"># Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math</span><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span><br>    <span class="hljs-comment"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>    <span class="hljs-comment"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># Options: mathjax | katex</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br><br>  <span class="hljs-comment"># 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图</span><br>  <span class="hljs-comment"># Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid</span><br>  <span class="hljs-attr">mermaid:</span><br>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`</span><br>    <span class="hljs-comment"># If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>    <span class="hljs-comment"># If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># See: http://mermaid-js.github.io/mermaid/</span><br>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;default&#x27;</span> &#125;<br><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugins</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span><br><span class="hljs-comment"># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: https://utteranc.es</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br>  <span class="hljs-attr">crossorigin:</span> <span class="hljs-string">anonymous</span><br><br><span class="hljs-comment"># Disqus</span><br><span class="hljs-comment"># 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs</span><br><span class="hljs-comment"># Based on third-party service</span><br><span class="hljs-comment"># See: https://disqus.com</span><br><span class="hljs-attr">disqus:</span><br>  <span class="hljs-attr">shortname:</span><br>  <span class="hljs-comment"># 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用</span><br>  <span class="hljs-comment"># The following are Disqusjs configurations, please ignore if DisqusJS is not required</span><br>  <span class="hljs-comment"># See: https://github.com/SukkaW/DisqusJS</span><br>  <span class="hljs-attr">disqusjs:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">apikey:</span><br><br><span class="hljs-comment"># Gitalk</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: https://github.com/gitalk/gitalk#options</span><br><span class="hljs-attr">gitalk:</span><br>  <span class="hljs-attr">clientID:</span><br>  <span class="hljs-attr">clientSecret:</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">owner:</span><br>  <span class="hljs-attr">admin:</span> [<span class="hljs-string">&#x27;name&#x27;</span>]<br>  <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]<br>  <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span><br>  <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 默认 proxy 已失效，解决方法请见下方链接</span><br>  <span class="hljs-comment"># The default proxy is invalid, please see the links for the solution</span><br>  <span class="hljs-comment"># https://github.com/gitalk/gitalk/issues/429</span><br>  <span class="hljs-comment"># https://github.com/Zibri/cloudflare-cors-anywhere</span><br>  <span class="hljs-attr">proxy:</span> <span class="hljs-string">&lt;your</span> <span class="hljs-string">own</span> <span class="hljs-string">proxy&gt;/https://github.com/login/oauth/access_token</span><br><br><span class="hljs-comment"># Valine</span><br><span class="hljs-comment"># 基于 LeanCloud</span><br><span class="hljs-comment"># Based on LeanCloud</span><br><span class="hljs-comment"># See: https://valine.js.org/configuration.html</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appid:</span><br>  <span class="hljs-attr">appkey:</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">说点什么</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">retro</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">serverURLs:</span><br><br><span class="hljs-comment"># Waline</span><br><span class="hljs-comment"># 从 Valine 衍生而来，额外增加了服务端和多种功能</span><br><span class="hljs-comment"># Derived from Valine, with self-hosted service and new features</span><br><span class="hljs-comment"># See: https://waline.js.org/</span><br><span class="hljs-attr">waline:</span><br>  <span class="hljs-attr">serverURL:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">说点什么</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">retro</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">avatarCDN:</span><br>  <span class="hljs-attr">avatarForce:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">requiredFields:</span> []<br>  <span class="hljs-attr">emojiCDN:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">emojiMaps:</span> &#123;&#125;<br>  <span class="hljs-attr">anonymous:</span><br><br><span class="hljs-comment"># 畅言 Changyan</span><br><span class="hljs-comment"># 基于第三方的服务</span><br><span class="hljs-comment"># Based on third-party service, insufficient support for regions outside China</span><br><span class="hljs-comment"># http://changyan.kuaizhan.com</span><br><span class="hljs-attr">changyan:</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># 来必力 Livere</span><br><span class="hljs-comment"># 基于第三方的服务</span><br><span class="hljs-comment"># Based on third-party service</span><br><span class="hljs-comment"># See: https://www.livere.com</span><br><span class="hljs-attr">livere:</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># Remark42</span><br><span class="hljs-comment"># 需要自托管服务端</span><br><span class="hljs-comment"># Based on self-hosted service</span><br><span class="hljs-comment"># See: https://remark42.com</span><br><span class="hljs-attr">remark42:</span><br>  <span class="hljs-attr">host:</span><br>  <span class="hljs-attr">site_id:</span><br>  <span class="hljs-attr">max_shown_comments:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">locale:</span> <span class="hljs-string">zh</span><br><br><span class="hljs-comment"># Twikoo</span><br><span class="hljs-comment"># 基于腾讯云开发</span><br><span class="hljs-comment"># Based on Tencent CloudBase</span><br><span class="hljs-comment"># See: https://twikoo.js.org</span><br><span class="hljs-attr">twikoo:</span><br>  <span class="hljs-attr">envId:</span><br>  <span class="hljs-attr">region:</span> <span class="hljs-string">ap-shanghai</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 归档页</span><br><span class="hljs-comment"># Archive Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">archive:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 分类页</span><br><span class="hljs-comment"># Category Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">category:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span><br><br>  <span class="hljs-comment"># 分类的排序字段，前面带减号是倒序，不带减号是正序</span><br>  <span class="hljs-comment"># Sort field for categories, with a minus sign is reverse order</span><br>  <span class="hljs-comment"># Options: length | name</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">&quot;-length&quot;</span><br><br>  <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span><br>  <span class="hljs-comment"># Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories</span><br>  <span class="hljs-attr">collapse_depth:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span><br>  <span class="hljs-comment"># Sort field for posts, with a minus sign is reverse order</span><br>  <span class="hljs-comment"># Options: date | title | or other field of front-matter</span><br>  <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;-date&quot;</span><br><br>  <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span><br>  <span class="hljs-comment"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span><br>  <span class="hljs-attr">post_limit:</span> <span class="hljs-number">10</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 标签页</span><br><span class="hljs-comment"># Tag Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">tag:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span><br>  <span class="hljs-attr">tagcloud:</span><br>    <span class="hljs-attr">min_font:</span> <span class="hljs-number">15</span><br>    <span class="hljs-attr">max_font:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">unit:</span> <span class="hljs-string">px</span><br>    <span class="hljs-attr">start_color:</span> <span class="hljs-string">&quot;#BBBBEE&quot;</span><br>    <span class="hljs-attr">end_color:</span> <span class="hljs-string">&quot;#337ab7&quot;</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 关于页</span><br><span class="hljs-comment"># About Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;王瀚弘&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;真正优秀的人，灵魂越是高贵，行为越是谦卑&quot;</span><br>  <span class="hljs-comment"># 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码</span><br>  <span class="hljs-comment"># More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code</span><br>  <span class="hljs-attr">icons:</span><br>  <span class="hljs-comment">#  - &#123; class: &quot;iconfont icon-github-fill&quot;, link: &quot;https://github.com&quot;, tip: &quot;GitHub&quot; &#125;</span><br>  <span class="hljs-comment">#  - &#123; class: &quot;iconfont icon-douban-fill&quot;, link: &quot;https://douban.com&quot;, tip: &quot;豆瓣&quot; &#125;</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-wechat-fill&quot;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span> &#125;<br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 自定义页</span><br><span class="hljs-comment"># Custom Page</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 通过 hexo new page 命令创建的页面</span><br><span class="hljs-comment"># Custom Page through `hexo new page`</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">page:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 404页</span><br><span class="hljs-comment"># 404 Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">page404:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">85</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span> <span class="hljs-string">&quot;Page not found这注定发生，你我都无法改变&quot;</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 友链页</span><br><span class="hljs-comment"># Links Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">subtitle:</span><br>  <span class="hljs-comment"># 友链的成员项</span><br>  <span class="hljs-comment"># Member item of page</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Blog&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题博客&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://hexo.fluid-dev.com/&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span><br>    &#125;<br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Docs&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题使用指南&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://hexo.fluid-dev.com/docs/&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span><br>    &#125;<br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Repo&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题 GitHub 仓库&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span><br>    &#125;<br><br>  <span class="hljs-comment"># 当成员头像加载失败时，替换为指定图片</span><br>  <span class="hljs-comment"># When the member avatar fails to load, replace the specified image</span><br>  <span class="hljs-attr">onerror_avatar:</span> <span class="hljs-string">/img/avatar.png</span><br><br>  <span class="hljs-comment"># 友链下方自定义区域，支持 HTML，可插入例如申请友链的文字</span><br>  <span class="hljs-comment"># Custom content at the bottom of the links</span><br>  <span class="hljs-attr">custom:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;&lt;hr&gt;&lt;p&gt;在下方留言申请加入我的友链，按如下格式提供信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;博客名：Fluid&lt;/li&gt;&lt;li&gt;简介：Fluid 主题官方博客&lt;/li&gt;&lt;li&gt;链接：https://hexo.fluid-dev.com&lt;/li&gt;&lt;li&gt;图片：https://hexo.fluid-dev.com/img/favicon.png&lt;/li&gt;&lt;/ul&gt;&#x27;</span><br><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 以下是配置 JS CSS 等静态资源的 URL 前缀，可以自定义成 CDN 地址，</span><br><span class="hljs-comment"># 默认的 jsDelivr CDN 可能在部分地区无法访问，如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，</span><br><span class="hljs-comment"># ** 如果你不知道如何设置，请不要做任何改动 **</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Here is the url prefix to configure the static assets. Set CDN addresses you want to customize.</span><br><span class="hljs-comment"># Be aware that you would better use the same version as default ones to avoid potential problems.</span><br><span class="hljs-comment"># DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-attr">static_prefix:</span><br>  <span class="hljs-comment"># 内部静态</span><br>  <span class="hljs-comment"># Internal static</span><br>  <span class="hljs-attr">internal_js:</span> <span class="hljs-string">/js</span><br>  <span class="hljs-attr">internal_css:</span> <span class="hljs-string">/css</span><br>  <span class="hljs-attr">internal_img:</span> <span class="hljs-string">/img</span><br><br>  <span class="hljs-attr">anchor:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/anchor-js@4.3.0/</span><br><br>  <span class="hljs-attr">github_markdown:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/github-markdown-css@4.0.0/</span><br><br>  <span class="hljs-attr">jquery:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/</span><br><br>  <span class="hljs-attr">bootstrap:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/</span><br><br>  <span class="hljs-attr">highlightjs:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/highlight.js@10.6.0/</span><br><br>  <span class="hljs-attr">prismjs:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/prismjs@1.23.0/</span><br><br>  <span class="hljs-attr">tocbot:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/tocbot@4.12.2/dist/</span><br><br>  <span class="hljs-attr">typed:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/typed.js@2.0.11/lib/</span><br><br>  <span class="hljs-attr">fancybox:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/</span><br><br>  <span class="hljs-attr">nprogress:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/nprogress@0.2.0/</span><br><br>  <span class="hljs-attr">mathjax:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/mathjax@3.1.2/es5/</span><br><br>  <span class="hljs-attr">katex:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/katex@0.13.0/dist/</span><br><br>  <span class="hljs-attr">busuanzi:</span> <span class="hljs-string">https://busuanzi.ibruce.info/busuanzi/2.3/</span><br><br>  <span class="hljs-attr">clipboard:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/clipboard@2.0.8/dist/</span><br><br>  <span class="hljs-attr">mermaid:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/mermaid@8.9.2/dist/</span><br><br>  <span class="hljs-attr">valine:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/valine@1.4.14/dist/</span><br><br>  <span class="hljs-attr">waline:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/@waline/client@0.14.8/dist/</span><br><br>  <span class="hljs-attr">gitalk:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/gitalk@1.7.2/dist/</span><br><br>  <span class="hljs-attr">disqusjs:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/disqusjs@1.3.0/dist/</span><br><br>  <span class="hljs-attr">twikoo:</span> <span class="hljs-string">https://cdn.jsdelivr.net/npm/twikoo@1.3.0/dist/</span><br><br>  <span class="hljs-attr">hint:</span> <span class="hljs-string">/lib/hint/</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>汇编语言</title>
    <link href="/2021/04/10/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <url>/2021/04/10/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="计算机的基本结构"><a href="#计算机的基本结构" class="headerlink" title="计算机的基本结构"></a>计算机的基本结构</h2><p>5种功能部件：中央处理器、内部存储器、系统总线、设备接口、外部设备</p><h3 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h3><p>英文全称Center Process Unit，简称CPU。</p><p>功能如下：</p><ol><li><strong>读取、解释、执行机器指令</strong>。</li><li><strong>与内部存储器、设备接口交换信息</strong>。</li><li><strong>执行除指令外的其他时序过程</strong>。</li><li><strong>完成算数逻辑运算</strong>。</li><li><strong>提供少量存储单元</strong>。</li></ol><h3 id="内部存储器"><a href="#内部存储器" class="headerlink" title="内部存储器"></a>内部存储器</h3><p>内存中存放<strong>指令序列</strong>和<strong>用于运算的各种数据</strong></p><p>内部存储器对应主板上的<strong>内存条</strong></p><p>外部存储器属于<strong>外部设备</strong></p><p>内部存储器中存放的信息可以让CPU立即使用</p><p>可执行程序存放在硬盘上CPU是不会执行的，必须先将其载入到内存，再由CPU执行</p><p>简称<strong>内存</strong></p><h3 id="总线系统"><a href="#总线系统" class="headerlink" title="总线系统"></a>总线系统</h3><p>系统总线是计算机系统的<strong>信息交换枢纽</strong>，供中央处理器、内存和设备接口进行信息交换</p><p>总线分为三组：</p><ol><li>地址总线</li><li>数据总线</li><li>控制总线</li></ol><p>两个部件要想完成信息交换，三者缺一不可</p><p>例如CPU读取内存的过程：</p><ol><li>CPU在<strong>地址总线</strong>上提供内存单元的地址</li><li>CPU在<strong>控制总线</strong>上提供“读”信号</li><li>内存单元执行”读“操作，将指定内存单元的数据取出到<strong>数据总线</strong>上传给CPU</li></ol><h3 id="设备接口"><a href="#设备接口" class="headerlink" title="设备接口"></a>设备接口</h3><p>接口的作用：</p><ol><li>信号转换</li><li>数据缓冲</li><li>与CPU交换信息，使CPU控制外接设备</li><li>可编程</li></ol><h3 id="外部设备"><a href="#外部设备" class="headerlink" title="外部设备"></a>外部设备</h3><p>略</p><h3 id="计算机系统的储存单元"><a href="#计算机系统的储存单元" class="headerlink" title="计算机系统的储存单元"></a>计算机系统的储存单元</h3><p>分为三类</p><ol><li>寄存器，位于CPU内部</li><li>内存单元</li><li>端口</li></ol><h2 id="8088-amp-8086CPU"><a href="#8088-amp-8086CPU" class="headerlink" title="8088&amp;8086CPU"></a>8088&amp;8086CPU</h2><h3 id="基本结构和工作原理"><a href="#基本结构和工作原理" class="headerlink" title="基本结构和工作原理"></a>基本结构和工作原理</h3><p>8086有16位数据总线，可以一次读取一个字（两个字节）</p><p>8088有8位数据总线，可以一次读取一个字节</p><p>但两者内部能够并行处理的最大二进制数都是十六位</p><h4 id="基本的流水线结构"><a href="#基本的流水线结构" class="headerlink" title="基本的流水线结构"></a>基本的流水线结构</h4><p>CPU内部分为BUI和EU两个组成部分</p><p>BUI，即Bus Interface Unit ，是总线接口单元。主要功能是实现CPU与<strong>系统总线</strong>的信息交换。</p><p>EU，即Execute Unit，是执行单元。主要功能是<strong>解释</strong>并<strong>执行</strong>指令。</p><p>BUI和EU可以同时工作，提高效率。</p><h4 id="指令列队"><a href="#指令列队" class="headerlink" title="指令列队"></a>指令列队</h4><p>位于BUI，是具有多个字节的存储单元</p><p>只要<strong>总线出现空闲</strong>，BUI便开始启动读取指令的时序操作，<strong>直到填满指令列队</strong>为止。</p><p>BUI读取到的指令都存在指令列队中，等待被EU读取，读取顺序为<strong>先入先出</strong></p><p><strong>读取指令</strong>这一时序过程与<strong>执行指令</strong>的时序过程<strong>无关</strong>,其中BUI负责<strong>读取指令</strong>，EU负责<strong>从指令列队中取出指令译码后执行</strong></p><p>指令列队与寄存器不同，不能被机器指令访问，只能由CPU自动管理</p><h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><p>控制器位于EU，是CPU的<strong>控制中心</strong></p><p>产生<strong>控制信号</strong>，包括<strong>作用于CPU内部的控制信号</strong>和<strong>CPU发送到系统总线的控制信号</strong></p><h4 id="地址加法器"><a href="#地址加法器" class="headerlink" title="地址加法器"></a>地址加法器</h4><p>位于BUI模块</p><p>功能是由<strong>逻辑地址</strong>计算<strong>物理地址</strong></p><blockquote><p>物理地址：</p><p>是一个固定长度的二进制无符号数编码。8088/8086通过读/写信号来区分“寄存器”、“内存”和”设备接口“，通过地址来确定在上述三者的具体位置。</p><p>物理地址包括高位地址和地位地址，相当于”栋“和”单元“的关系</p></blockquote><blockquote><p>逻辑地址：</p><p>8088/8086的地址总线宽度为20位，没有寄存器可以存下。所以CPU采用 分段管理方式 ，并使用逻辑地址作为CPU内部的物理地址的表达方式。</p><p>段是指内存中一段连续的存储空间，包含多个连续的字节单元。</p><p>逻辑地址由两个16位的编码组成：段基值 和 偏移量（均为无符号数编码）</p><p>转换关系：</p><p>段基址=段基值*16（左移4位，后补4个0）</p><p>物理地址=段基址+偏移量</p></blockquote><h4 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h4><p>位于EU模块</p><p>完成算术运算、逻辑运算</p><p>支持双操作数运算</p><h4 id="总线控制逻辑"><a href="#总线控制逻辑" class="headerlink" title="总线控制逻辑"></a>总线控制逻辑</h4><p>位于BIU模块</p><p>用于控制在适当的时候向总线传递相应信号，或从总线接收相应信号</p><h3 id="8088-8086CPU的寄存器组"><a href="#8088-8086CPU的寄存器组" class="headerlink" title="8088/8086CPU的寄存器组"></a>8088/8086CPU的寄存器组</h3><h4 id="数据寄存器组"><a href="#数据寄存器组" class="headerlink" title="数据寄存器组"></a>数据寄存器组</h4><p>数据寄存器是指用于实现指令功能的寄存器。</p><p>数据寄存器都与CPU内部的局部总线相连，使得他们可以为运算器或其他寄存器提供原始数据，即提供<strong>源操作数</strong></p><table><thead><tr><th>寄存器简写</th><th>寄存器名</th></tr></thead><tbody><tr><td>AX（AL、AH）</td><td>累加器</td></tr><tr><td>BX（BL、BH）</td><td>基址寄存器</td></tr><tr><td>CX（CL、CH）</td><td>计数寄存器</td></tr><tr><td>DX（DL、DH）</td><td>数据寄存器</td></tr></tbody></table><h4 id="段寄存器组"><a href="#段寄存器组" class="headerlink" title="段寄存器组"></a>段寄存器组</h4><p>8088/8086CPU共有4个段寄存器，分别用于保存4个段基值，为生成内存单元的物理地址提供必要条件</p><table><thead><tr><th>寄存器简写</th><th>寄存器名</th><th>功能</th></tr></thead><tbody><tr><td>CS(Code Segment)</td><td>代码段段寄存器</td><td>存放由机器指令组成的程序</td></tr><tr><td>DS(Data Segment)</td><td>数据段段寄存器</td><td>保存变量数据</td></tr><tr><td>SS(Stack Segment)</td><td>堆栈段段寄存器</td><td>保存中断断点、子程序返回点、用户使用堆栈临时保存的数据</td></tr><tr><td>ES(Extra Segment)</td><td>附加段段寄存器</td><td>用于串操作等</td></tr></tbody></table><h4 id="地址指针寄存器组"><a href="#地址指针寄存器组" class="headerlink" title="地址指针寄存器组"></a>地址指针寄存器组</h4><p>用于提供内存单元逻辑地址中的<strong>偏移量</strong>或<strong>构成偏移量的分量</strong>。</p><table><thead><tr><th>寄存器简写</th><th>寄存器名</th><th>与段寄存器的搭配关系</th></tr></thead><tbody><tr><td>BX</td><td>基址寄存器</td><td>默认与DS搭配，可更改</td></tr><tr><td>SP</td><td>堆栈指针寄存器</td><td><em><strong>只能与SS搭配</strong></em></td></tr><tr><td>BP</td><td>基址指针寄存器</td><td>默认与SS搭配，可更改</td></tr><tr><td>SI</td><td>源变址寄存器</td><td>默认与DS搭配，可更改</td></tr><tr><td>DI</td><td>目的变址寄存器</td><td>默认与DS搭配，可更改；在串操作指令中只能与ES搭配</td></tr></tbody></table><p><em><strong>数据寄存器和地址指针寄存器一并称为通用寄存器</strong></em></p><h4 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h4><p>包括<strong>指令指针寄存器IP</strong>和<strong>标志寄存器FR</strong></p><h5 id="指令指针寄存器IP"><a href="#指令指针寄存器IP" class="headerlink" title="指令指针寄存器IP"></a>指令指针寄存器IP</h5><p>指令指针寄存器IP(Instruction Pointer)，该寄存器中保存的是CPU下一条要从<strong>内存</strong>中读取的指令在当前代码段（CS指向的段）中首字节的偏移量。</p><p><strong>IP固定与CS搭配使用</strong>，形成下一条即将被读取指令的逻辑地址</p><p>CPU中的BIU每从内存中读取一条指令后，IP指向的对象都会发生改变，指向下一条将被读取的指令 </p><h5 id="标志寄存器FR"><a href="#标志寄存器FR" class="headerlink" title="标志寄存器FR"></a>标志寄存器FR</h5><p>标志寄存器FR(Flag Register)，用于反映最近一次影响标志位的算术或逻辑运算中，运算过程、运算结果的一些性质</p><p>为16位寄存器，其中有效标志位有9位，分别为</p><table><thead><tr><th>状态标志简写</th><th>状态标志名</th><th>功能</th></tr></thead><tbody><tr><td>CF</td><td>进位寄存器</td><td>执行加、减运算时如果最高位发生进位或借位，则置一</td></tr><tr><td>PF</td><td>奇偶标志位</td><td>执行算数逻辑运算后，如运算结果后8位包含偶个1，则置一</td></tr><tr><td>AF</td><td>辅助进位标志位</td><td>执行加、减运算时如果第三位产生进位或借位，则置一</td></tr><tr><td>ZF</td><td>零值标志位</td><td>运算结果为9，则置一</td></tr><tr><td>SF</td><td>符号标志位</td><td>执行算术逻辑运算指令后，SF标志和运算结果的最高位保持一致</td></tr><tr><td>OF</td><td>溢出标志位</td><td>执行算术指令后，如出现溢出，则置一</td></tr><tr><td>TF</td><td>单步跟踪标志位</td><td>为0时，CPU处于连续执行指令工作模式；为1时，CPU处于单步模式</td></tr><tr><td>IF</td><td>中断使能标志位</td><td>为0时，不会响应任何可屏蔽中断</td></tr><tr><td>DF</td><td>方向标志位</td><td>为0时，串操作指令按照地址递增的方向经行操作；为1时···递减···</td></tr></tbody></table><p>前六个为<strong>状态标志</strong>，后三个为<strong>控制标志</strong></p><h1 id="8086-8088基本指令系统"><a href="#8086-8088基本指令系统" class="headerlink" title="8086/8088基本指令系统"></a>8086/8088基本指令系统</h1><h2 id="汇编指令基本格式"><a href="#汇编指令基本格式" class="headerlink" title="汇编指令基本格式"></a>汇编指令基本格式</h2><p>构成汇编指令的基本元素包括<strong>操作助记符</strong>和<strong>操作数</strong></p><p>前者指明指令的功能，后者指明指令操作的数据</p><h3 id="基本格式——双操作数指令"><a href="#基本格式——双操作数指令" class="headerlink" title="基本格式——双操作数指令"></a>基本格式——双操作数指令</h3><p>MOV    AX，    BX</p><p>MOV是操作助记符；</p><p>AX是目的操作数，代表操作完成的结果数据；</p><p>BX是源操作数，为指令提供原始数据。</p><h3 id="基本格式——单操作数指令"><a href="#基本格式——单操作数指令" class="headerlink" title="基本格式——单操作数指令"></a>基本格式——单操作数指令</h3><p>NOT    AX</p><p>NOT是操作助记符；</p><p>AX既提供原始数据，又可以保存操作结果。</p><h3 id="基本格式——无操作数指令"><a href="#基本格式——无操作数指令" class="headerlink" title="基本格式——无操作数指令"></a>基本格式——无操作数指令</h3><p>NOP</p><p>NOP是操作助记符</p><h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><p><em><strong>寻址方式是指指令获得操作数的方式</strong></em></p><h3 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h3><p>操作数储存在寄存器中，无需访问内存，执行很快</p><p>例：</p><p>MOV    AX，    BX    ;（BX）保存到AX</p><p>ADD    AL,    DL    ;(AL)与(DL)相加后保存在AL</p><h3 id="立即数寻址"><a href="#立即数寻址" class="headerlink" title="立即数寻址"></a>立即数寻址</h3><p>操作数包含在机器指令内，无需访问内存，执行很快</p><p>例：</p><p>MOV    AL,    25    将25保存到AL</p><h3 id="存储器寻址方式"><a href="#存储器寻址方式" class="headerlink" title="存储器寻址方式"></a>存储器寻址方式</h3><p>操作数在内存单元内，执行较慢</p><p>在内存单元中寻址需要知道物理地址，物理地址由<strong>逻辑地址</strong>转换而来，逻辑地址由<strong>段基值</strong>和<strong>偏移量</strong>构成。</p><p>偏移量有多种获取方式，不同的获取方式形成不同的储存器寻址方式。</p><p>内存单元的偏移量由三种不同的偏移分量构成，它们分别是：</p><ol><li>机器指令位移量字段提供的位移量</li><li>基址寄存器提供的基址分量</li><li>变址寄存器提供的变址分量</li></ol><p>偏移量又称<strong>有效地址(effective address)</strong>,简称<strong>EA</strong>。</p><h5 id="直接寻址方式"><a href="#直接寻址方式" class="headerlink" title="直接寻址方式"></a>直接寻址方式</h5><p>直接使用机器指令中位移量字段中的位移量作为内存操作数的偏移量</p><p><em><strong>EA=DISP</strong></em></p><p>DISP是指disparity，即位移量</p><p>例：</p><p>MOV    AL,    [1000H]</p><p>这条指令忽略了段基值，默认使用DS提供段基值</p><p>MOV    ES:[0100H],    BX</p><p>这条指令指明使用ES提供段基值</p><p>MOV    VAR1,    BL</p><p>这条指令中的VAR1是一个变量名，实质为<strong>符号位移量</strong>，在会汇编后将被替换成数值位移量，二者在实质上是相同的。同样的这条指令忽略的段基值，由DS提供</p><p>MOV    VAR1+2,    AL</p><p>这条指令的目标操作数的VAR1后面有一个“+2”，表示偏移量为VAR1+2.</p><h5 id="寄存器间接寻址方式"><a href="#寄存器间接寻址方式" class="headerlink" title="寄存器间接寻址方式"></a>寄存器间接寻址方式</h5><p>内存操作数的偏移量由地址指针寄存器BX、BP、SI、DI<strong>其中之一</strong>提供，则称该操作数为<strong>寄存器间接寻址方式</strong></p><p>其中    BX、BP提供的是<strong>基址分量</strong></p><p>​            SI、DI提供的是<strong>变址分量</strong></p><table><thead><tr><th>寄存器简写</th><th>寄存器名</th><th>与段寄存器的搭配关系</th></tr></thead><tbody><tr><td>BX</td><td>基址寄存器</td><td>默认与DS搭配，可更改</td></tr><tr><td>SP</td><td>堆栈指针寄存器</td><td><em><strong>只能与SS搭配</strong></em></td></tr><tr><td>BP</td><td>基址指针寄存器</td><td><strong>默认与SS搭配</strong>，可更改</td></tr><tr><td>SI</td><td>源变址寄存器</td><td>默认与DS搭配，可更改</td></tr><tr><td>DI</td><td>目的变址寄存器</td><td>默认与DS搭配，可更改；在串操作指令中只能与ES搭配</td></tr></tbody></table><p>例：</p><p>ADD    CL,    [BX]</p><p>SUB    ES:[SI],    AX</p><h5 id="基址寻址与变址寻址"><a href="#基址寻址与变址寻址" class="headerlink" title="基址寻址与变址寻址"></a>基址寻址与变址寻址</h5><p>如果内存操作数的偏移量由<strong>基址分量</strong>与<strong>位移分量</strong>相加得到，那么称这种寻址方式为<strong>基址寻址方式</strong></p><p>如果内存操作数的偏移量由<strong>变址分量</strong>与<strong>位移分量</strong>相加得到，那么称这种寻址方式为<strong>变址寻址方式</strong></p><p>例：</p><p>MOV    AL,    [BP]100H</p><p>源操作数为基址寻址方式，基址分量由BP提供，段基值默认为SS提供，位移分量为100H；目的操作数为寄存器寻址方式</p><p>MOV    BYTE PTR[SI]220H,    30H</p><p>源操作数为立即数寻址方式；目的操作数为变址寻址方式，变址分量由SI提供，段基值默认由 DS提供，位移分量为220H。其中BYTE PTR代表内存单元的字节类型。</p><p><em><strong>注意：BX、SI、DI默认与DS搭配，BP默认与SS搭配</strong></em></p><h5 id="基址变址寻址"><a href="#基址变址寻址" class="headerlink" title="基址变址寻址"></a>基址变址寻址</h5><p>如果偏移量由<strong>基址分量、变址分量和偏移量</strong>组成，那么该操作数为基址变址寻址。（齐全了）</p><p>例：</p><p>AND    AL,    [BX] [SI] 0020H</p><p>源操作数为基址变址寻址，基址分量由BX提供，变址分量由SI提供，位移量为0020H，段基值由DS提供。</p><h4 id="其他寻址方式"><a href="#其他寻址方式" class="headerlink" title="其他寻址方式"></a>其他寻址方式</h4><h5 id="串操作寻址"><a href="#串操作寻址" class="headerlink" title="串操作寻址"></a>串操作寻址</h5><p>若指令为串操作指令，则<strong>内存操作数</strong>的寻址方式为串操作数寻址方式</p><h5 id="端口寻址方式"><a href="#端口寻址方式" class="headerlink" title="端口寻址方式"></a>端口寻址方式</h5><p>在读写端口的指令中，与端口有关的操作数均为<strong>端口寻址方式</strong></p><h5 id="隐含寻址方式"><a href="#隐含寻址方式" class="headerlink" title="隐含寻址方式"></a>隐含寻址方式</h5><p>有一些指令存在对内存单元的隐含使用，这种方式称为<strong>隐含寻址方式</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++面对对象的程序设计</title>
    <link href="/2021/04/10/C++%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2021/04/10/C++%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="C-基础知识"><a href="#C-基础知识" class="headerlink" title="C++基础知识"></a>C++基础知识</h1><h2 id="C-概述"><a href="#C-概述" class="headerlink" title="C++概述"></a>C++概述</h2><p>C++是一种面向对象的编程语言，由C语言发展而来。</p><h2 id="C-对C的补充"><a href="#C-对C的补充" class="headerlink" title="C++对C的补充"></a>C++对C的补充</h2><h3 id="新的输入输出方式"><a href="#新的输入输出方式" class="headerlink" title="新的输入输出方式"></a>新的输入输出方式</h3><h4 id="cout"><a href="#cout" class="headerlink" title="cout"></a>cout</h4><p>运算符<code>&lt;&lt;</code> 用于输出，称为插入运算符，意思是将输出内容插入到输出流中。</p><p>说明</p><ol><li><code>&lt;&lt;</code> 可以连续使用。</li><li>对于一般的指针，<code>&lt;&lt;</code> 输出其指针值；对于字符型指针，<code>&lt;&lt;</code> 输出其所指向的字符串。</li><li>可以直接输出字符串常量。</li><li>用<code>endl</code> 表示换行。</li></ol><p>例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">char</span> c=<span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">float</span> f=<span class="hljs-number">20.325</span>;<br>    <span class="hljs-keyword">int</span> *pi=&amp;i;<br>    <span class="hljs-keyword">char</span> *pa=<span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    cout&lt;&lt;i&lt;&lt;&#x27;/t&#x27;&lt;&lt;c&lt;&lt;&#x27;/t&#x27;&lt;&lt;f&lt;&lt;endl;<br>    cout&lt;&lt;pi&lt;&lt;&#x27;/t&#x27;&lt;&lt;pa&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;这是一个字符串常量！&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">10a20</span><span class="hljs-string">.</span><span class="hljs-comment">325</span><br><span class="hljs-comment">0012ff38Hello</span> <span class="hljs-comment">World!</span><br><span class="hljs-comment">这是一个字符串常量！</span><br></code></pre></td></tr></table></figure><h4 id="cin"><a href="#cin" class="headerlink" title="cin"></a>cin</h4><p>运算符<code>&gt;&gt;</code> 用于输入，称为提取运算符。意思是从输入流中抽取一个数据。</p><p>同样的，可以连续使用。</p><p>例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">float</span> f;<br>    cin&gt;&gt;i&gt;&gt;c&gt;&gt;f;<br>    cout&lt;&lt;<span class="hljs-string">&quot;i=&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; c=&quot;</span>&lt;&lt;c&lt;&lt;<span class="hljs-string">&quot; f=&quot;</span>&lt;&lt;f;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">10</span>a<span class="hljs-number">30</span>.<span class="hljs-number">89</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">i</span>=10 <span class="hljs-attribute">c</span>=a <span class="hljs-attribute">f</span>=30.89<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>cin为缓冲流。键盘键入的数据保存在缓冲区中，cin实际是从缓冲区提取数据。如果一次输入数据过多，会滞留在缓冲区中，影响下一次输入。</li><li>输入的数据应与数据类型相同。</li><li>空格、回车都可以作为数据之间的分隔符；多个数据可以在同一行输入，也可在不同行输入对于字符型数据和字符串，空格无法用cin输入，字符串中也不能有空格；回车符也无法读入。</li></ol><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> i;<br>cin&gt;&gt;i;<br></code></pre></td></tr></table></figure><p>intput:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">W</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>则<code>i</code>的值<strong>不是</strong>20，cin自动跳过前面的分隔符，遇到第一个非空白字符为W，它无法转化为整形，故读取失败。</p><p>例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">char</span> s[<span class="hljs-number">100</span>];<br>cin&gt;&gt;s;<br></code></pre></td></tr></table></figure><p>input:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">123 </span>  <span class="hljs-number">456</span><br></code></pre></td></tr></table></figure><p><code>s</code> 的内容为<code>123</code></p><h3 id="注释、变量声明与作用域限定符"><a href="#注释、变量声明与作用域限定符" class="headerlink" title="注释、变量声明与作用域限定符"></a>注释、变量声明与作用域限定符</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*...*/</span><br><span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><h4 id="随时随地声明变量"><a href="#随时随地声明变量" class="headerlink" title="随时随地声明变量"></a>随时随地声明变量</h4><p>C语言中变量声明必须在可执行代码前，C++则可以在任何地方声明。</p><h4 id="作用域限定符”：：“"><a href="#作用域限定符”：：“" class="headerlink" title="作用域限定符”：：“"></a>作用域限定符”：：“</h4><p>格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">限定符::成员名<br></code></pre></td></tr></table></figure><p>限定符可以被省略，此时说明<code>::</code> 后的成员为全局变量</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#iostream<span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">20</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;局部变量i=&quot;</span>&lt;&lt;i;<br>    cout&lt;&lt;<span class="hljs-string">&quot; 全局变量i=&quot;</span>&lt;&lt;::i;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mian</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">fun</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>outcome:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">局部变量<span class="hljs-attribute">i</span>=20 全局变量<span class="hljs-attribute">i</span>=10<br></code></pre></td></tr></table></figure><h3 id="强制类型转换与从上图标识符"><a href="#强制类型转换与从上图标识符" class="headerlink" title="强制类型转换与从上图标识符"></a>强制类型转换与从上图标识符</h3><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>C语言</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> i=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">char</span> c=(<span class="hljs-keyword">char</span>)i;<br></code></pre></td></tr></table></figure><p>C++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> i=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">char</span> c=<span class="hljs-built_in"><span class="hljs-keyword">char</span></span>(i);<br></code></pre></td></tr></table></figure><p>两者均可用</p><h4 id="const常量标识符"><a href="#const常量标识符" class="headerlink" title="const常量标识符"></a>const常量标识符</h4><p>注意：</p><p>（1）常量定义时必须初始化</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">5</span>;<br>i=<span class="hljs-number">10</span>;<span class="hljs-comment">//wrong</span><br>i++;<span class="hljs-comment">//wrong</span><br></code></pre></td></tr></table></figure><p>（2）const为右结合，若是简单数据类型，可以写在数据类型左侧</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">const</span> j=<span class="hljs-number">6</span>;<br></code></pre></td></tr></table></figure><p>（3）可以在任何地方定义，其作用域随位置不同而不同。</p><h3 id="函数原型声明"><a href="#函数原型声明" class="headerlink" title="函数原型声明"></a>函数原型声明</h3><p>如函数调用位置在函数定义之前，则应在调用前声明函数原型，这样编译系统可以对函数调用的合法性经行检查，以保证程序运行的正确性。</p><p>函数原型声明语法如下：</p><p>​    函数返回类型 函数名 （参数表）;</p><p>注意：</p><p>（1）每个参数之间用逗号相隔。</p><p>（2）可以只声明参数类型，不给出参数名，如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1,*p2)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *,<span class="hljs-keyword">int</span> *)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p>函数调用需要耗费一定时间，如果一个函数需要频繁调用，那么将消耗大量时间，从而降低程序运行效率。C++提供内联函数来减少函数调用所需消耗的时间，即将函数的代码嵌入到每一个调用处，虽然这样会使程序边长，但它可以避免调用函数。</p><p>声明内联函数很简单，只需在函数返回类型前加关键字<code>inline</code> 即可。</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x+y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">10</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>        cout&lt;&lt;<span class="hljs-built_in">Add</span>(i,i)&lt;&lt;<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>output</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">20</span><span class="hljs-number">18</span><span class="hljs-number">16</span><span class="hljs-number">14</span><span class="hljs-number">12</span><span class="hljs-number">10</span><span class="hljs-number">8</span><span class="hljs-number">6</span><span class="hljs-number">4</span><span class="hljs-number">2</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>注意：使用内联函数虽然可以减小时间的开销，但会增加程序长度，一次，<code>inline</code> 关键字只适用于<strong>短小且频繁调用的</strong>函数。</p><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>C语言规定，在同一作用域中不能有同名函数存在。与之相反，C++允许在同一作用域中用同一函数名定义多个函数。</p><p>在这些函数中，函数的参数的个数、类型、顺序不尽相同。编译器会根据实参和形参的最佳匹配来确定调用哪一个函数。这就是函数的重载。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b&gt;a) <span class="hljs-keyword">return</span> b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a,<span class="hljs-keyword">float</span> b,<span class="hljs-keyword">float</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b&gt;a) a=b;<br>    <span class="hljs-keyword">if</span>(c&gt;a) a=c;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a,b;<br>    <span class="hljs-keyword">float</span> c,d,e;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    cin&gt;&gt;c&gt;&gt;d&gt;&gt;e;<br>    <span class="hljs-keyword">int</span> m;<br>    m=<span class="hljs-built_in">Max</span>(a,b);<br>    cout&lt;&lt;<span class="hljs-string">&quot;Max_int=&quot;</span>&lt;&lt;m&lt;&lt;endl;<br>    <span class="hljs-keyword">float</span> n=<span class="hljs-built_in">Max</span>(c,d,e);<br>    cout&lt;&lt;<span class="hljs-string">&quot;Max_float=&quot;</span>&lt;&lt;n&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>input</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">56 </span><span class="hljs-number">90</span><br><span class="hljs-number">23.2</span> <span class="hljs-number">30.5</span> <span class="hljs-number">1.4</span><br></code></pre></td></tr></table></figure><p>output</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Max_int</span>=<span class="hljs-number">90</span><br><span class="hljs-attr">Max_float</span>=<span class="hljs-number">30.5</span><br></code></pre></td></tr></table></figure><p>注意：重载函数的参数类型、个数和顺序<strong>至少有一个</strong>不同；函数返回类型可以相同也可以不同。</p><h3 id="带默认参数的函数"><a href="#带默认参数的函数" class="headerlink" title="带默认参数的函数"></a>带默认参数的函数</h3><p>函数调用的时候要将实参传递给形参，一般情况下实参的个数应与形参个数相同。有时也会出现多次用相同实参调用同一个函数的情况。C++为此提供简化方式：</p><p>例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">void <span class="hljs-builtin-name">Set</span>(int <span class="hljs-attribute">i</span>=0)<br></code></pre></td></tr></table></figure><p>若不传递实参调用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Set</span><span class="hljs-params">()</span></span><span class="hljs-comment">//此时相当于调用Set(0)</span><br></code></pre></td></tr></table></figure><p>也可以传递实参调用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Set</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span><br></code></pre></td></tr></table></figure><p>注意：若有多个实参，则默认参数必须在最右边</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">void <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(int a,int b,int c=<span class="hljs-number">10</span>)</span></span><span class="hljs-comment">//合法</span><br>void <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(int a,int c=<span class="hljs-number">10</span>,int b)</span></span><span class="hljs-comment">//不合法</span><br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>引用是C++一种数据类型，即给变量起另一个名字，以便在需要时间接引用该变量。对一个变量引用所做的所有操作，都是对该变量本身的操作。引用运算符使用<code>&amp;</code> 。</p><p>声明一个引用的语法如下：</p><p>​    &lt;类型标识符&gt;&amp;&lt;引用名&gt;=&lt;变量名&gt;</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> &amp;j=i;<br></code></pre></td></tr></table></figure><p>注意：<br>（1）引用在声明时必须初始化，即指定它指向哪个变量。</p><p>（2）引用变量一经初始化，就不能再引用别的变量。</p><p>（3）运算符<code>&amp;</code> 只有在其前面有类型符相连时才代表“引用”，否则代表“取地址”。</p><p>（4）系统不会为变量的引用另外分配储存空间，引用和被引用变量共享同一内存单元。</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mian</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> &amp;j=i;<br>    cout&lt;&lt;<span class="hljs-string">&quot;i=&quot;</span>&lt;&lt;i&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;j=&quot;</span>&lt;&lt;j&lt;&lt;endl;<br>    j++;<br>    i++;<br>    cout&lt;&lt;<span class="hljs-string">&quot;i=&quot;</span>&lt;&lt;i&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;j=&quot;</span>&lt;&lt;j&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">i</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">j</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">i</span>=<span class="hljs-number">12</span><br><span class="hljs-attr">j</span>=<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h3 id="运算符new和delete"><a href="#运算符new和delete" class="headerlink" title="运算符new和delete"></a>运算符new和delete</h3><h4 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h4><p>new操作符格式如下：</p><p>（1）指针变量=new 类型；</p><p>（2）指针变量=new 类型（初值）；</p><p>（3）指针变量=new 类型[数组元素数]。</p><p>new的返回值：若是非数组类型，返回指向该类型对象的指针；若是数组类型，返回数组的首地址。</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> *p;<br>p=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>;<span class="hljs-comment">//动态内存分配</span><br>*p=<span class="hljs-number">3</span>;<span class="hljs-comment">//第二、三行可以合并成：p=new int(3);</span><br><span class="hljs-keyword">float</span> *pl;<br>pl=<span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[<span class="hljs-number">3</span>];<span class="hljs-comment">//为三个元素的float数组申请堆内存</span><br>pl[<span class="hljs-number">2</span>]=<span class="hljs-number">20.9</span>;<span class="hljs-comment">//为数组第三个元素赋值</span><br></code></pre></td></tr></table></figure><p>注意：</p><p>（1）new申请内存不一定总会成功，不成功时返回NULL。程序应注意判断new操作符的返回值，只有在非NULL的情况下才能进行访问。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> *p;<br>p=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>;<br><span class="hljs-keyword">if</span>(p!=<span class="hljs-literal">NULL</span>)<br>&#123;<span class="hljs-comment">//申请到内存</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<span class="hljs-comment">//申请失败</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（2）new为数组分配内存时无法提供初值。</p><p>（3）new为二维数组分配堆内存可以按以下方式进行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> m=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">int</span> n=<span class="hljs-number">4</span>;<br><span class="hljs-keyword">int</span> **p;<br>p=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>* [m];<span class="hljs-comment">//第一维，分配m行</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>&#123;<br>    p[i]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> [n];<span class="hljs-comment">//第二维，为每行分配n给元素</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="delete操作符"><a href="#delete操作符" class="headerlink" title="delete操作符"></a>delete操作符</h4><p>delete操作符格式：</p><p>（1）delete 指针变量；        //释放指针变量所指向的堆内存</p><p>（2）delete []指针变量；     //释放为数组分配的堆内存</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">delete</span> p;<span class="hljs-comment">//释放p指向的堆内存</span><br><br><span class="hljs-keyword">delete</span> []p;<span class="hljs-comment">//释放p数组分配的内存</span><br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;m;i++)<span class="hljs-comment">//释放二维数组分配的内存</span><br>&#123;<br><span class="hljs-keyword">delete</span> [] p[i]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：new申请的堆内存在用完后必须用delete释放‘</strong></p><h2 id="C-程序的开发过程"><a href="#C-程序的开发过程" class="headerlink" title="C++程序的开发过程"></a>C++程序的开发过程</h2><h3 id="一个简单的C-程序"><a href="#一个简单的C-程序" class="headerlink" title="一个简单的C++程序"></a>一个简单的C++程序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">/*****************************************</span><br><span class="hljs-comment"> *(1)编译预处理命令</span><br><span class="hljs-comment"> *   所有预处理命令都以“#”引导</span><br><span class="hljs-comment"> *   每条预处理命令单独占一行</span><br><span class="hljs-comment"> *   不以“；”结束                          </span><br><span class="hljs-comment"> *****************************************/</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">/*****************************************</span><br><span class="hljs-comment"> *(2)针对命名空间的命令</span><br><span class="hljs-comment"> *****************************************/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><span class="hljs-comment">//主函数</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Hello World!&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C-程序的开发"><a href="#C-程序的开发" class="headerlink" title="C++程序的开发"></a>C++程序的开发</h3><p>（1）程序编辑</p><p>​            编写程序源码并将其输入到计算机中，生成拓展名为.cpp的磁盘文件</p><p>（2）程序编译</p><p>​            将源代码通过编译器转换为机器语言代码，生成拓展名为.obj的目标文件</p><p>（3）程序连接</p><p>​            将多个目标文件和系统提供的库文件中的某些文件连接在一起，生成一个拓展名为.exe的可执行文件</p><p>（4）程序运行</p><h1 id="C-类和对象"><a href="#C-类和对象" class="headerlink" title="C++类和对象"></a>C++类和对象</h1><h2 id="面向对象程序设计方法概述"><a href="#面向对象程序设计方法概述" class="headerlink" title="面向对象程序设计方法概述"></a>面向对象程序设计方法概述</h2><h3 id="面对对象程序设计方法的基本概念"><a href="#面对对象程序设计方法的基本概念" class="headerlink" title="面对对象程序设计方法的基本概念"></a>面对对象程序设计方法的基本概念</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>对象是人研究的任何事物，包含两个要素——属性和行为。</p><p>例如研究对象是学生张三，其属性包括：姓名、性别、年龄、学号、成绩······其行为可以包括：添加一个学生，更改学号，添加成绩······</p><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>具有相同属性和行为的对象的抽象就是<strong>类</strong>。</p><p>例如许多像张三一样的学生就是学生类。</p><h4 id="方法和消息"><a href="#方法和消息" class="headerlink" title="方法和消息"></a>方法和消息</h4><p>类中行为的实现过程即类的方法，也是类的成员函数。一个方法包括方法名（函数名）、返回值类型、参数表和方法体（函数体）。</p><p>对象之间通过发送消息来实现相互沟通。向对象发送一条消息时至少要包括接收消息的对象名、对象需执行行为的名称（方法名）也许还有调用方法的参数。</p><h3 id="面向对象程序设计方法的基本原理"><a href="#面向对象程序设计方法的基本原理" class="headerlink" title="面向对象程序设计方法的基本原理"></a>面向对象程序设计方法的基本原理</h3><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>从众多的事物中抽取出共同的、本质的特征就是抽象。</p><p>抽象是简化问题的途径，它可以为具体问题找到最恰当的类定义。</p><p>抽象时要忽略无关信息。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>把对象的属性和行为结合成一个独立的单位，尽可能隐藏对象的内部细节。</p><p>有两层含义：</p><ol><li>把对象的全部属性和行为结合在一起，形成一个不可分割的独立单位，对象的属性值只能由这个对象的行为来读取和修改。</li><li>在对象的内部和外部之间形成一道屏障，内部与外部的联系只能通过外部接口实现。</li></ol><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>类是C++语言的一种抽象和封装机制,它描述了一种具有相同属性和行为的对象</p><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>将对象的属性抽象为数据成员，将对象的行为抽象为成员函数，并对他们经行封装，就由此形成了类。</p><p>类的定义格式一般分为声明部分和实现部分。</p><p>声明部分是用来声明该类的成员，包括数据成员的声明和成员函数的声明。所谓成员函数的声明，就是只声明成员函数的函数原型，而成员函数的实现则是对成员函数经行定义。</p><p>类的一般定义格式如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span>&lt;</span>name&gt;<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    &lt;成员函数或数据成员的声明&gt;<br>    <span class="hljs-keyword">private</span>:<br>    &lt;数据成员或成员函数的声明&gt;<br>&#125;;<br>&lt;各个成员函数的类外实现&gt;<br></code></pre></td></tr></table></figure><ol><li>class是定义类的关键字，<name>是标识符</li><li>{}内是声明部分，包含描述属性的数据成员和定义行为的成员函数的函数原型</li><li>关键字public、private和protected被称为访问限制符，说明成员的访问权限</li><li>成员函数一般被列为公有成员，为外界提供操作接口，便于访问和</li><li>应用数据成员一般被列为私有成员，因为类的数据必须是封装的，不能随便取用</li><li>&lt;各个成员函数的类外实现&gt;是类的实现部分</li></ol><p>下面给出一个日期类定义的例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//文件路径名：s2_1\sclass2_1_date.h</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetDate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">int</span> d)</span></span><br><span class="hljs-function">    </span>&#123;<br>        year = y;<br>        month = m;<br>        day = d;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">IsLeapYear</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span>(year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||(year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout&lt;&lt;year&lt;&lt;<span class="hljs-string">&quot;年&quot;</span>&lt;&lt;month&lt;&lt;<span class="hljs-string">&quot;月&quot;</span>&lt;&lt;day&lt;&lt;<span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> year;<br>    <span class="hljs-keyword">int</span> month;<br>    <span class="hljs-keyword">int</span> day;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;sclass2_1_date.h.&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    Date d1;<br>    d1.<span class="hljs-built_in">SetDate</span>(<span class="hljs-number">2012</span>,<span class="hljs-number">11</span>,<span class="hljs-number">11</span>);<br>    d1.<span class="hljs-built_in">Print</span>();<br>    cout&lt;&lt;<span class="hljs-string">&quot;此年是闰年吗？:&quot;</span>&lt;&lt;d1.<span class="hljs-built_in">IsLeapYear</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2012</span>年<span class="hljs-number">11</span>月<span class="hljs-number">11</span>日此年是闰年吗？：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>一般规定：</strong></p><ol><li>在类体中先声明类的行为，后声明类的属性</li><li>一般按数据成员类型的大小，由小到大声明，这样可以提高空间利用率</li></ol><h3 id="成员函数的实现"><a href="#成员函数的实现" class="headerlink" title="成员函数的实现"></a>成员函数的实现</h3><p>类的核心是<strong>成员函数</strong>，而成员函数的核心是<strong>算法</strong>。因此算法的程序实现就是成员函数的实现，即“类的实现”。</p><p>成员函数的实现一般有两种方式：<strong>类内实现</strong>，和<strong>类外实现</strong></p><p><strong>类内实现</strong>指每一个成员函数在声明时就定义了代码。</p><p><strong>类外实现</strong>指把实现成员函数的代码放在类外。</p><p>例如把前一个例子的声明精简如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetDate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">int</span> d)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">IsLeapYear</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> year;<br>    <span class="hljs-keyword">int</span> month;<br>    <span class="hljs-keyword">int</span> day;<br>&#125;;<br></code></pre></td></tr></table></figure><p>建议将声明内容单独放在一个头文件（拓展名.h）中，实现部分放在一个源文件（拓展名为.cpp）里。</p><p><strong>上面为声明部分，下面为实现部分</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Date::SetDate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">int</span> d)</span></span><br><span class="hljs-function"></span>&#123;<br>    year = y;<br>    month = m;<br>    day = d;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Date::IsLeapYear</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span>(year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||(year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Date::Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;year&lt;&lt;<span class="hljs-string">&#x27;.&#x27;</span>&lt;&lt;month&lt;&lt;<span class="hljs-string">&#x27;.&#x27;</span>&lt;&lt;day&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p><strong>类名 对象名;</strong></p><p>或</p><p><strong>类名 对象1，对象2；</strong></p><p>如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">Date newDate;<span class="hljs-comment">//方法一</span><br>Date newDate1,newDate2;<span class="hljs-comment">//方法二</span><br></code></pre></td></tr></table></figure><p>由于Date类没有为对象初始化，所以以上每个对象的年月日在对象创建时由系统<strong>随机</strong>初始化。</p><p>创建对象的代码要写在main()中，并将main()单独放在一个源文件（.cpp）中</p><h3 id="类成员的访问"><a href="#类成员的访问" class="headerlink" title="类成员的访问"></a>类成员的访问</h3><h4 id="类成员的一般访问形式"><a href="#类成员的一般访问形式" class="headerlink" title="类成员的一般访问形式"></a>类成员的一般访问形式</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">对象名.数据成员名;<br>对象名.成员函数名(参数表);<br></code></pre></td></tr></table></figure><h4 id="类成员的访问权限"><a href="#类成员的访问权限" class="headerlink" title="类成员的访问权限"></a>类成员的访问权限</h4><p>共有三中访问权限</p><ol><li><strong>public</strong>代表公有的访问权限。它修饰了类对外公开的部分，凡是由public声明的成员被称为<strong>公有成员</strong>，<strong>允许类外访问</strong>。</li><li><strong>private</strong>代表私有的访问权限，它规定了只能被<strong>类内部的成员函数</strong>访问的部分，任何类外的访问都是非法的。private像一道屏障，把它所修饰的成员与外部分隔开实现数据隐藏，在最大程度上保护了类的私有数据。</li><li><strong>protected</strong>代表保护的访问权限。它与私有的访问权限类似，曲别在于保护权限的成员不仅可以被本类的成员函数访问，还可以被派生类的成员访问。</li></ol><p>注意：</p><ol><li>不同权限的成员可以以任意顺序声明。</li><li>如果<strong>私有成员</strong>类在最前面，可以省略关键字<code>private</code>,因为它是默认的访问限制符。</li></ol><p>例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//文件路径名：s2_2\sclass2_2_cdemo.h    // sclass2_2_cdemo.h文件开始</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __SCLASS2_2_CDEMO_H__</span><br><span class="hljs-comment">// 如果未定义__SCLASS2_2_CDEMO_H__</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __SCLASS2_2_CDEMO_H__</span><br><span class="hljs-comment">// 则定义__SCLASS2_2_CDEMO_H__,继续编译后面的语句,直到遇到#endif</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><br><span class="hljs-comment">//CDemo类的定义     </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDemo</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetI</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span>                 <span class="hljs-comment">//设置外部接口SetI( )为i赋值</span></span><br><span class="hljs-function"></span>&#123;<br>i = a;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetJ</span><span class="hljs-params">(<span class="hljs-keyword">int</span> b)</span> <span class="hljs-comment">//设置外部接口SetJ( )为j赋值</span></span><br><span class="hljs-function"></span>&#123;<br>j = b;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetI</span><span class="hljs-params">( )</span> </span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; endl;     <span class="hljs-comment">//输出i的值</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetJ</span><span class="hljs-params">( )</span> </span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;j=&quot;</span> &lt;&lt; j &lt;&lt; endl;     <span class="hljs-comment">//输出j的值</span><br>&#125;<br><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">int</span> j;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> i;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span><span class="hljs-comment">// sclass2_2_cdemo.h文件结束</span></span><br><br><br><span class="hljs-comment">// 文件路径名:s2_2\smain2_2.cpp  // smain2_2.cppsmain2_2.cpp文件开始</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;sclass2_2_cdemo.h.&quot;</span> </span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>CDemo d; <span class="hljs-comment">//创建一个Demo类对象 </span><br>d.<span class="hljs-built_in">SetI</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">//调用SetI( ) 间接访问私有数据i并为i赋值为10</span><br>d.<span class="hljs-built_in">SetJ</span>(<span class="hljs-number">20</span>); <span class="hljs-comment">//调用SetJ( ) 间接访问私有数据j并为i赋值为20</span><br><span class="hljs-comment">// d.i ＝10;       // 非法！</span><br><span class="hljs-comment">// d.j ＝20;       // 非法！</span><br>d.<span class="hljs-built_in">GetI</span>( ); <span class="hljs-comment">//调用GetI( )间接访问私有数据i并输出其值</span><br>d.<span class="hljs-built_in">GetJ</span>( ); <span class="hljs-comment">//调用GetJ( )间接访问私有数据j并输出其值</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">// smain2_2.cpp文件结束</span><br><br></code></pre></td></tr></table></figure><h2 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数为对象在被创建时<strong>分配内存空间</strong>，利用给定的值去<strong>初始化对象的数据成员</strong>，把对象构造成一个特定的状态。</p><p>声明构造函数的格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">public</span>:<br>类名(参数表);<br></code></pre></td></tr></table></figure><p>构造函是类的一个特殊函数，如果一个类没有人为构造函数，那么系统会自动生成一个<strong>不带参数</strong>的默认构造函数。</p><p><em><strong>构造函数名就是类名，无返回值</strong></em></p><h3 id="重载构造函数"><a href="#重载构造函数" class="headerlink" title="重载构造函数"></a>重载构造函数</h3><p>可以在一个类中定义多个构造函数，即重载函数</p><p>例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Date</span>();<span class="hljs-comment">//构造函数1</span><br>    <span class="hljs-built_in">Date</span>(<span class="hljs-keyword">int</span> y,<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">int</span> d);<span class="hljs-comment">//构造函数2</span><br>    <span class="hljs-comment">/*以下略*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="带默认参数的构造函数"><a href="#带默认参数的构造函数" class="headerlink" title="带默认参数的构造函数"></a>带默认参数的构造函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Date</span>(<span class="hljs-keyword">int</span> y=<span class="hljs-number">2021</span>,m=<span class="hljs-number">4</span>,d=<span class="hljs-number">8</span>);<br>    <span class="hljs-comment">/*略*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><p>用来复制对象的一种特殊构造函数，格式如下：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">public</span>:<br>类名(<span class="hljs-keyword">const</span> 类名&amp;对象名)；<br></code></pre></td></tr></table></figure><p>注意</p><ol><li>拷贝构造函数名就是类名</li><li>没有返回类型</li><li>有且只有一个参数</li><li>const用于约束参数不变</li><li>参数采用引用方法传递可以减少内存空间的占用，减少系统开销</li><li>不含指针的类可以使用系统自动生成的拷贝构造函数经行<strong>浅拷贝</strong></li><li>含指针的类有必要定义一个<strong>深度拷贝构造函数</strong>，先申请内存空间再经行内容的复制</li></ol><p>例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cpoint</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">cpoint</span>(<span class="hljs-keyword">int</span> x1,<span class="hljs-keyword">int</span> y1);<br><span class="hljs-built_in">cpoint</span>(<span class="hljs-keyword">const</span> cpoint &amp;obj);<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span></span>;<br>~<span class="hljs-built_in">cpoint</span>()&#123;&#125;;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">int</span> y;<br>&#125;;<br><br>cpoint::<span class="hljs-built_in">cpoint</span>(<span class="hljs-keyword">int</span> x1,<span class="hljs-keyword">int</span> y1)<br>&#123;<br>x=x1;<br>y=y1;<br>&#125;<br><br>cpoint::<span class="hljs-built_in">cpoint</span>(<span class="hljs-keyword">const</span> cpoint &amp;obj)<br>&#123;<br>x=obj.x;<br>y=obj.y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cpoint::getX</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cpoint::getY</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> y;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;cpoint.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">cpoint <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-function">cpoint <span class="hljs-title">b</span><span class="hljs-params">(a)</span></span>;<br>cpoint c=b;<br>cout&lt;&lt;<span class="hljs-string">&quot;a(&quot;</span>&lt;&lt;a.<span class="hljs-built_in">getX</span>()&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;a.<span class="hljs-built_in">getY</span>()&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;b(&quot;</span>&lt;&lt;b.<span class="hljs-built_in">getX</span>()&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;b.<span class="hljs-built_in">getY</span>()&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;c(&quot;</span>&lt;&lt;c.<span class="hljs-built_in">getX</span>()&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;c.<span class="hljs-built_in">getY</span>()&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>经行对象的清理工作</p><p>格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">public</span>:<br>~类名();<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>析构函数名与类名相同，前面多家一个“~”</li><li>无返回值和参数，不能重载</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++Primer</title>
    <link href="/2021/04/10/C++Primer/"/>
    <url>/2021/04/10/C++Primer/</url>
    
    <content type="html"><![CDATA[<h1 id="DOS命令"><a href="#DOS命令" class="headerlink" title="DOS命令"></a>DOS命令</h1><ol><li><code>win+r</code>打开运行，输入<code>cmd</code>打开DOS窗口</li><li><code>exit</code>命令退出当前DOS窗口</li><li><code>cls</code>清屏</li><li><code>dir</code>列出当前目录下的所有子文件/子目录</li><li><code>cd</code>命令。（1）表示change directry 改变路径（2）用法：<code>cd 目录的路径</code>（3）路径可以是相对路径也可以是绝对路径</li><li><code>cd..</code>回到上级目录</li><li><code>cd\</code>回到根目录</li><li><code>D:</code>切换盘符</li></ol><h1 id="C-基础"><a href="#C-基础" class="headerlink" title="C++基础"></a>C++基础</h1><h2 id="变量和基本类型"><a href="#变量和基本类型" class="headerlink" title="变量和基本类型"></a>变量和基本类型</h2><h3 id="基本内置类型"><a href="#基本内置类型" class="headerlink" title="基本内置类型"></a>基本内置类型</h3><h4 id="2-1-1算术类型"><a href="#2-1-1算术类型" class="headerlink" title="2.1.1算术类型"></a>2.1.1算术类型</h4><p>算术类型分为两类，即<strong>整型</strong>和<strong>浮点型</strong></p><blockquote><p>此处有一个表格</p></blockquote><p>整型包括<strong>有符号型</strong>和<strong>无符号型</strong></p><h4 id="2-1-2类型转换"><a href="#2-1-2类型转换" class="headerlink" title="2.1.2类型转换"></a>2.1.2类型转换</h4><ol><li>当我们把一个非布尔型的算数值赋给布尔型时，初始值为0则结果为false，否则结果为true。</li><li>当我们把一个布尔值赋给非布尔值时，初始值为false，则结果为0，否则为1。</li><li>当我们把一个浮点数赋给整型时，进行了近似处理。结果仅保留浮点数的整数部分。</li><li>当我们把一个整数赋给浮点类型时，小数部分记为0.如果整数部分超过了浮点类型的容量，精度可能有损失。</li><li>当我们赋给无符号类型一个超出它表示范围的值时，结果是<strong>初始值对无符号类型表示数值总数取模后的余数</strong>。</li><li>当我们赋给一个类型超出它表示范围的值时，结果是未定义的。</li></ol><h4 id="2-1-3字面量常量"><a href="#2-1-3字面量常量" class="headerlink" title="2.1.3字面量常量"></a>2.1.3字面量常量</h4><p>整型字面量的具体数据类型由它的值和符号决定。十进制字面量是带符号数，八进制和十六进制数既可以是带符号数也可以是无符号数。</p><p>十进制字面量的类型是int、long int、long long int中尺寸最小的那个。</p><p>八进制和十六进制的类型是int\long int\long long int\unsigned int····中最小的那一个。</p><p>字符和字符串字面量略</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> a = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">int</span> a&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="符合类型"><a href="#符合类型" class="headerlink" title="符合类型"></a>符合类型</h3><h3 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h3><h3 id="处理类型"><a href="#处理类型" class="headerlink" title="处理类型"></a>处理类型</h3><h3 id="自定义数据类型"><a href="#自定义数据类型" class="headerlink" title="自定义数据类型"></a>自定义数据类型</h3><h2 id="字符串、向量和数组"><a href="#字符串、向量和数组" class="headerlink" title="字符串、向量和数组"></a>字符串、向量和数组</h2><h3 id="using声明"><a href="#using声明" class="headerlink" title="using声明"></a>using声明</h3><p>格式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span>::name;<br></code></pre></td></tr></table></figure><p>注意：<strong>头文件不应包含using声明</strong></p><h3 id="标准库类型string"><a href="#标准库类型string" class="headerlink" title="标准库类型string"></a>标准库类型string</h3><p><strong>string</strong>类型表示 <em>可变长</em>  的字符序列</p><p>使用时应包含</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> std::string;<br></code></pre></td></tr></table></figure><h4 id="3-2-1定义和初始化string对象"><a href="#3-2-1定义和初始化string对象" class="headerlink" title="3.2.1定义和初始化string对象"></a>3.2.1定义和初始化string对象</h4><p>定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s;<br></code></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1=s2;<br>string s=<span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-comment">//拷贝初始化</span><br><span class="hljs-function">string <span class="hljs-title">s3</span><span class="hljs-params">(s2)</span></span>;<br><span class="hljs-function">string <span class="hljs-title">ss</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;c&#x27;</span>)</span></span>;<br><span class="hljs-function">string <span class="hljs-title">sss</span><span class="hljs-params">(<span class="hljs-string">&quot;abc&quot;</span>)</span></span>;<br></code></pre></td></tr></table></figure><h4 id="3-2-2string对象的操作"><a href="#3-2-2string对象的操作" class="headerlink" title="3.2.2string对象的操作"></a>3.2.2string对象的操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">s1+s2;<span class="hljs-comment">//返回s1和s2连接的结果</span><br><span class="hljs-built_in">getline</span>(is,s);<span class="hljs-comment">//将一行的信息读到s中</span><br>s.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//返回s的长度</span><br>s.<span class="hljs-built_in">empty</span>();<span class="hljs-comment">//如果s为空，则返回1；否则返回0</span><br></code></pre></td></tr></table></figure><p>注意：<code>s.size</code>的返回类型是string::size_type，建议这样使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> len=s.<span class="hljs-built_in">size</span>();<br></code></pre></td></tr></table></figure><p>string对象可以相互比较，并对大小写敏感。</p><p>字面量值可以和string对象相加，但两个字面量值不能相加，如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s1=<span class="hljs-string">&quot;hello&quot;</span>,s2=<span class="hljs-string">&quot;world&quot;</span>,s3;<br>s3=s1+<span class="hljs-string">&quot; &quot;</span>+s2;<span class="hljs-comment">//正确</span><br>s3=<span class="hljs-string">&quot;hello&quot;</span>+<span class="hljs-string">&quot; &quot;</span>+s2;<span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure><h4 id="3-2-3处理string中的字符"><a href="#3-2-3处理string中的字符" class="headerlink" title="3.2.3处理string中的字符"></a>3.2.3处理string中的字符</h4><p>基于范围的for语句</p><p>格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(declaration:expression)<br>statement<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s=<span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c:s)<br>    cout&lt;&lt;c&lt;&lt;endl;<br><span class="hljs-comment">//将s中的每个字符每行一个输出出来，没有改变s中的字符</span><br></code></pre></td></tr></table></figure><p>再例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">string s=<span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;c:s)<br>    c=<span class="hljs-built_in">toupper</span>(c);<br>cout&lt;&lt;s&lt;&lt;endl;<br><span class="hljs-comment">//将s中的每个字母变成大写</span><br></code></pre></td></tr></table></figure><p>可以使用下标取值</p><h3 id="3-3标准库类型vector"><a href="#3-3标准库类型vector" class="headerlink" title="3.3标准库类型vector"></a>3.3标准库类型vector</h3><p>vector表示对象的集合</p><p>使用时应加入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> std::vector;<br></code></pre></td></tr></table></figure><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h1 id="C-标准库"><a href="#C-标准库" class="headerlink" title="C++标准库"></a>C++标准库</h1><h2 id="IO库"><a href="#IO库" class="headerlink" title="IO库"></a>IO库</h2><h2 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h2><h2 id="泛型算法"><a href="#泛型算法" class="headerlink" title="泛型算法"></a>泛型算法</h2><h2 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h2><h2 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h2><h1 id="类设计者的工具"><a href="#类设计者的工具" class="headerlink" title="类设计者的工具"></a>类设计者的工具</h1><h2 id="拷贝控制"><a href="#拷贝控制" class="headerlink" title="拷贝控制"></a>拷贝控制</h2><h2 id="重载运算与类型转换"><a href="#重载运算与类型转换" class="headerlink" title="重载运算与类型转换"></a>重载运算与类型转换</h2><h2 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h2><h2 id="模板与泛型编程"><a href="#模板与泛型编程" class="headerlink" title="模板与泛型编程"></a>模板与泛型编程</h2><h1 id="高级主题"><a href="#高级主题" class="headerlink" title="高级主题"></a>高级主题</h1>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
